union Datacenter = VsphereDatacenter | OvirtDatacenter
union Cluster = VsphereCluster | OvirtCluster
union Host = VsphereHost | OvirtHost
union Storage = VsphereDatastore | OvirtStorageDomain
union Network = VsphereNetwork | DvPortGroup | DvSwitch | OvirtNetwork
union VM = VsphereVM | VsphereFolder | OvirtVM

union VsphereNetworkGroup = VsphereNetwork | DvPortGroup | DvSwitch
union VsphereVMGroup = VsphereFolder | VsphereVM
union VsphereFolderGroup =
      VsphereFolder
    | VsphereDatacenter
    | VsphereCluster
    | VsphereDatastore
    | VsphereNetwork
    | DvPortGroup
    | DvSwitch
    | VsphereVM

type VsphereFolder {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  parent: ID!
  childrenIDs: [ID!]!
  children: [VsphereFolderGroup!]!
}

type Provider {
  id: ID!
  name: String!
  type: String!
  product: String!
  datacenters: [Datacenter!]!
}

type VsphereDatacenter {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  clustersID: ID!
  clusters: VsphereFolder!
  datastoresID: ID!
  datastores: VsphereFolder!
  networksID: ID!
  networks: VsphereFolder!
  vmsID: ID!
  vms: VsphereFolder!
}

type VsphereCluster {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  datastoresIDs: [ID!]!
  datastores: [VsphereDatastore!]!
  networksIDs: [ID!]!
  networks: [VsphereNetworkGroup!]!
  hosts: [VsphereHost!]!
  dasEnabled: Boolean!
  dasVmsIDs: [ID!]!
  dasVms: [VsphereVM!]!
  drsEnabled: Boolean!
  drsBehavior: String!
  drsVmsIDs: [ID!]!
  drsVms: [VsphereVM!]!
}

type VsphereHost {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  cluster: ID!
  productName: String!
  productVersion: String!
  inMaintenance: Boolean!
  cpuSockets: Int!
  cpuCores: Int!
  vms: [VsphereVM!]!
  datastoreIDs: [ID!]!
  datastores: [VsphereDatastore!]!
  networking: ConfigNetwork!
  networksIDs: [ID!]!
  networks: [VsphereNetworkGroup!]!
  networkAdapters: [NetworkAdapter!]!
}

type VsphereDatastore {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  capacity: Int!
  free: Int!
  maintenance: String!
  hosts: [VsphereHost!]!
  vms: [VsphereVM!]!
}

type VsphereNetwork {
  id: ID!
  provider: ID!
  kind: String!
  variant: String!
  name: String!
  parent: VsphereFolder!
  tag: String!
  vms: [VsphereVM!]!
}

type DvPortGroup {
  id: ID!
  variant: String!
  name: String!
  provider: ID!
  parent: VsphereFolder!
  dvSwitch: ID!
  ports: [String!]!
  vms: [VsphereVM!]!
}

type DvSwitch {
  id: ID!
  variant: String!
  name: String!
  provider: ID!
  parent: VsphereFolder!
  portgroups: [DvPortGroup!]!
  host: [DvSHost]! 
}

type DvSHost {
	host: String!
	PNIC: [String!]!
}

type ConfigNetwork {
  vNICs: [VNIC]!
  pNICs: [PNIC]!
  portGroups: [PortGroup]!
  vSwitches: [VSwitch]!
}

type PortGroup {
  key: String!
  name: String!
  vswitch: ID!
}

type VSwitch {
  key: String!
  name: String!
  portGroups: [String!]!
  pNICs: [String!]!
}

type PNIC {
  key: String!
  linkSpeed: Int!
}

type VNIC {
  key: String!
  portGroup: String!
  dPortGroup: String!
  ipAddress: String!
  mtu: Int!
}

type NetworkAdapter {
  name: String!
  ipAddress: String!
  linkSpeed: Int!
  mtu: Int!
}

type VsphereVM {
  id: ID!
  kind: String!
  provider: ID!
  name: String!
  path: String!
  revision: Int!
  revisionValidated: Int!
  uuid: String!
  firmware: String!
  ipAddress: String!
  powerState: String!
  cpuAffinity: [Int!]!
  cpuHotAddEnabled: Boolean!
  cpuHotRemoveEnabled: Boolean!
  memoryHotAddEnabled: Boolean!
  faultToleranceEnabled: Boolean!
  cpuCount: Int!
  coresPerSocket: Int!
  memoryMB: Int!
  guestName: String!
  balloonedMemory: Int!
  numaNodeAffinity: [String!]
  storageUsed: Int!
  snapshot: Int!
  isTemplate: Boolean! 
  hostID: ID!
  host: VsphereHost!
  devices: [Device]
  disks: [Disk!]!
  netIDs: [ID!]!
  networks: [VsphereNetworkGroup!]!
  concerns: [Concern!]!
}

type Device {
  Kind: String!
}

type Disk {
  key: Int!
  file: String!
  datastore: String!
  capacity: Int!
  shared: Boolean!
  rdm: Boolean!
}

type Concern {
  label: String!
  category: String!
  assessment: String!
}  

type OvirtDatacenter {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  clusters: [OvirtCluster!]!
  storages: [OvirtStorageDomain!]!
  networks: [OvirtNetwork!]!
}

type OvirtCluster {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  dataCenter: ID!
  haReservation: Boolean!
  ksmEnabled: Boolean!
  biosType: String!
  hosts: [OvirtHost!]
  vms: [OvirtVM!]
}

type OvirtHost {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  cluster: ID!
  status: String!
	productName: String!
	productVersion: String!
	inMaintenance: Boolean!
	cpuSockets: Int!
	cpuCores: Int!
	networkAttachments: [NetworkAttachment!]!
	nics: [HostNIC!]! 
  vms: [OvirtVM!]
}

type NetworkAttachment {
	id: String!
	network: String!
}

type HostNIC {
	id: String!
	name: String!
	linkSpeed: Int!
	mtu: Int! 
	vlan: String!
}

type OvirtStorageDomain {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  description: String!
	dataCenter: String! 
	type: String!
	storageType: String!
	available: Int!
	used: Int!
}

type OvirtNetwork {
  id: ID!
  provider: ID!
  kind: String!
  name: String!
  description: String!
	dataCenter: ID! 
	vlan: String!
	usages: [String!]!
	profiles: [String!]!
}

type OvirtNICProfile {
  id: ID!
  provider: ID!
  name: String!
  description: String!
	network: ID!
	portMirroring: Boolean!
  networkFilter: String!
	qos: String!
	properties: [Property!]!
	passThrough: Boolean!
}

type DiskProfile {
  id: ID!
  provider: ID!
  name: String!
  description: String!
	storageDomain: ID!
	qos: String!
}

type OvirtVM {
  id: ID!
  kind: String!
  provider: ID!
  name: String!
  description: String!
	cluster: String!
	host: String!
	revisionValidated: Int!
	policyVersion: Int!
	guestName: String!
	cpuSockets: Int!
	cpuCores: Int!
	cpuThreads: Int!
	cpuAffinity: [CpuPinning]!
	cpuShares: Int!
	memory: Int!
	balloonedMemory: Boolean!
	bios: String!
	display: String!
	iOThreads: Int!
	storageErrorResumeBehaviour: String!
	haEnabled: Boolean!
	usbEnabled: Boolean!
	bootMenuEnabled: Boolean!
	placementPolicyAffinity: String!
	timezone: String!
	status: String!
	stateless: String!
	serialNumber: String!
	hasIllegalImages: Boolean!
	numaNodeAffinity: [String!]
	leaseStorageDomain: String!
	diskAttachments: [DiskAttachment!]!
	nics: [String!]!
	hostDevices: [HostDevice!]!
	cdroms: [CDROM!]!
	watchDogs: [WatchDog!]!
	properties: [Property!]!
	snapshots: [Snapshot!]!
	concerns: [Concern!]!
	guest: Guest!
	osType: String!
}

type CpuPinning {
	set: Int!
	cpu: Int!
}

type Snapshot {
	id: ID!
	description: String!
	type: String!
	persistMemory: Boolean!
}

type DiskAttachment {
	id: ID!
	interface: String!
	scsiReservation: Boolean!
	disk: String!
}

type HostDevice {
	capability: String!
	product: String!
	vendor: String!
}

type CDROM {
	id: ID!
	file: String!
}

type WatchDog {
	id: ID!
	action: String!
	model: String!
}

type Property {
	name: String!
	value: String!
}

type Guest {
	distribution: String!
	fullVersion: String!
}

input VMFilter {
  cpuHotAddEnabled: Boolean
  ipAddress: String
  powerState: String
  memoryMB: Int
}

type Query {
  providers: [Provider!]!
  provider(id: ID!): Provider!
  datacenters(provider: ID): [Datacenter!]!
  datacenter(id: ID!, provider: ID!): Datacenter!
  clusters(provider: ID): [Cluster!]!
  cluster(id: ID!, provider: ID!): Cluster!
  hosts(provider: ID): [Host!]!
  host(id: ID!, provider: ID!): Host!
  storages(provider: ID): [Storage!]!
  storage(id: ID!, provider: ID!): Storage!
  networks(provider: ID): [Network!]!
  network(id: ID!, provider: ID!): Network!
  vms(provider: ID, filter: VMFilter): [VM!]!
  vm(id: ID!, provider: ID!): VM!

  vspherefolders(provider: ID): [VsphereFolder!]!
  vspherefolder(id: ID!, provider: ID!): VsphereFolder!
}

